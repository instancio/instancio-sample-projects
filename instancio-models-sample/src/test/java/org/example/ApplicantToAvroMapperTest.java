package org.example;

import org.apache.avro.AvroRuntimeException;
import org.example.avro.ApplicantAvro;
import org.example.dto.Address;
import org.example.dto.Applicant;
import org.example.dto.Grade;
import org.instancio.Instancio;
import org.instancio.Model;
import org.instancio.Select;
import org.instancio.Selector;
import org.instancio.TargetSelector;
import org.instancio.junit.InstancioExtension;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.assertj.core.api.BDDAssertions.then;
import static org.instancio.Select.all;
import static org.instancio.Select.field;

@ExtendWith(InstancioExtension.class)
class ApplicantToAvroMapperTest {

    private final ApplicantToAvroMapper mapper = new ApplicantToAvroMapper();

    /**
     * Returns a model that provides data for all test methods in this class.
     * Test methods can override values generated by this model as needed.
     *
     * @return a model that defines a valid Applicant that
     * can be processed successfully by the class under test.
     */
    private static Model<Applicant> createValidApplicantModel() {
        TargetSelector nullableFields = Select.all(
                field(Applicant::getMiddleName),
                field(Address::getPostalCode));

        return Instancio.of(Applicant.class)
                .withNullable(nullableFields)
                .generate(field(Applicant::getAge), gen -> gen.ints().range(18, 25))
                .generate(all(Grade.class), gen -> gen.oneOf(Grade.A, Grade.B))
                .toModel();
    }

    @Test
    @DisplayName("Valid applicant should be successfully converted to Avro")
    void verifyValidApplicantAvro() {
        // Given
        final Applicant applicant = Instancio.create(createValidApplicantModel());

        // When
        final ApplicantAvro result = mapper.toAvro(applicant);

        then(result)
                .usingRecursiveComparison()
                .isEqualTo(applicant);
    }

    @Test
    @DisplayName("Validation should fail if applicant is under 18 or over 25")
    void applicantAgeValidation() {
        Applicant applicant = Instancio.of(createValidApplicantModel())
                .generate(field(Applicant::getAge), gen -> gen.oneOf(17, 26))
                .create();

        assertThatThrownBy(() -> mapper.toAvro(applicant))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Applicant must be between 18 and 25 years of age");
    }

    @Test
    @DisplayName("Validation should fail if applicant's grade is lower than B")
    void applicantGradeValidation() {
        Applicant applicant = Instancio.of(createValidApplicantModel())
                .generate(all(Grade.class), gen -> gen.oneOf(Grade.C, Grade.D, Grade.F))
                .create();

        assertThatThrownBy(() -> mapper.toAvro(applicant))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Applicant's grade must be either A or B");
    }

    @Test
    @DisplayName("Should throw AvroRuntimeException if any of the required fields is null")
    void shouldThrowAvroRuntimeExceptionIfRequiredDataIsMissing() {
        Selector[] requiredFields = {
                field(Applicant::getFirstName),
                field(Applicant::getLastName),
                field(Address::getStreet),
                field(Address::getCity),
                field(Address::getCountry)
        };

        // Set each of these to null individually, so that only one required field is null at a time
        Arrays.stream(requiredFields).forEach(selector -> {
            // Given
            Applicant applicant = Instancio.of(createValidApplicantModel())
                    .set(selector, null)
                    .create();

            // Then
            assertThatThrownBy(() -> mapper.toAvro(applicant))
                    .as("Expected %s to be required", selector)
                    .isInstanceOf(AvroRuntimeException.class);
        });
    }
}
